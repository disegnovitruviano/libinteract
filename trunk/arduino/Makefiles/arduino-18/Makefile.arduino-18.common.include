# Arduino 0018 Makefile
# Arduino adaptation by mellis, eighthave, oli.keller
#
# This makefile allows you to build sketches from the command line
# without the Arduino environment (or Java).
#
# Detailed instructions for using the makefile:
#
#  1. Copy this file into the folder with your sketch. There should be a
#     file with the same name as the folder and with the extension .pde
#     (e.g. foo.pde in the foo/ folder).
#
#  2. Modify the line containg "INSTALL_DIR" to point to the directory that
#     contains the Arduino installation (for example, under Mac OS X, this
#     might be /Applications/arduino-0012).
#
#  3. Modify the line containing "PORT" to refer to the filename
#     representing the USB or serial connection to your Arduino board
#     (e.g. PORT = /dev/tty.USB0).  If the exact name of this file
#     changes, you can use * as a wildcard (e.g. PORT = /dev/tty.usb*).
#
#  4. Set the line containing "MCU" to match your board's processor.
#     Older one's are atmega8 based, newer ones like Arduino Mini, Bluetooth
#     or Diecimila have the atmega168.  If you're using a LilyPad Arduino,
#     change F_CPU to 8000000.
#
#  5. At the command line, change to the directory containing your
#     program's file and the makefile.
#
#  6. Type "make" and press enter to compile/verify your program.
#
#  7. Type "make upload", reset your Arduino board, and press enter to
#     upload your program to the Arduino board.
#
# $Id$

INSTALL_DIR = /Applications/Arduino.app/Contents/Resources/Java/
SKETCHBOOK_DIR = $(HOME)/Documents/Arduino/


############################################################################
# Below here nothing should be changed...

ARDUINO = $(INSTALL_DIR)/hardware/arduino/cores/arduino
LIBRARIES_DIR = $(INSTALL_DIR)/libraries/
CONTRIB_LIBRARIES_DIR = $(SKETCHBOOK_DIR)/libraries

TARGET_DIR = $(BUILD_DIR)/..

# Eclipse settings
ifndef AVRTARGETFCPU
F_CPU = $(DEFAULT_F_CPU)
else
F_CPU = $(AVRTARGETFCPU)
endif

#ifndef AVRTARGETMCU
MCU = $(DEFAULT_MCU)
#else
#MCU = $(AVRTARGETMCU)
#endif

# Programming support using avrdude. Settings and variables.
ifndef AVRDUDEOPTIONS
AVRDUDE_PORT = $(DEFAULT_PORT)
AVRDUDE_WRITE_FLASH = -U flash:w:$(BUILD_DIR)/$(TARGET).hex
AVRDUDE_FLAGS = -V -C $(INSTALL_DIR)/hardware/tools/avr/etc/avrdude.conf \
-p $(MCU) -P $(AVRDUDE_PORT) -c $(DEFAULT_PROGRAMMER) \
-b $(DEFAULT_UPLOAD_RATE)
else
AVRDUDE_FLAGS = $(AVRDUDEOPTION)
endif

# Programming support using avrdude. Settings and variables.
#TARGET = $(notdir $(CURDIR))
#INSTALL_DIR = /Applications/Arduino.app/Contents/Resources/Java
#SKETCHBOOK_DIR = ~/Documents/Arduino/

#PORT = /dev/tty.usbserial-*
#UPLOAD_RATE = 19200
#AVRDUDE_PROGRAMMER = avrisp2
##MCU = atmega168
#MCU = atmega1280
#F_CPU = 16000000

############################################################################
# Below here nothing should be changed...

# ARDUINO = $(INSTALL_DIR)/hardware/arduino/cores/arduino
AVR_TOOLS_PATH = $(INSTALL_DIR)/hardware/tools/avr/bin
# AVR_TOOLS_PATH = /usr/bin
AVRDUDE_PATH = $(INSTALL_DIR)/hardware/tools/avr/bin

# Libraries
LIBRARIES_DIR = $(INSTALL_DIR)/libraries
CONTRIB_LIBRARIES_DIR = $(SKETCHBOOK_DIR)/libraries

LIBRARIES_DIRS   = $(foreach LIBNAME, $(LIBRARIES), $(LIBRARIES_DIR)/$(LIBNAME)/)
LIBRARIES_DIRS  += $(foreach LIBNAME, $(LIBRARIES), $(LIBRARIES_DIR)/$(LIBNAME)/utility/)
LIBRARIES_DIRS  += $(foreach LIBNAME, $(CONTRIB_LIBRARIES), $(CONTRIB_LIBRARIES_DIR)/$(LIBNAME)/)
LIBRARIES_DIRS  += $(foreach LIBNAME, $(CONTRIB_LIBRARIES), $(CONTRIB_LIBRARIES_DIR)/$(LIBNAME)/utility)

C_LIBRARIES = $(foreach LIBDIR, $(LIBRARIES_DIRS), $(wildcard $(LIBDIR)/*.c))
CXX_LIBRARIES = $(foreach LIBDIR, $(LIBRARIES_DIRS), $(wildcard $(LIBDIR)/*.cpp))
ASRC_LIBRARIES = $(foreach LIBDIR, $(LIBRARIES_DIRS), $(wildcard $(LIBDIR)/*.S))

C_MODULES =  \
$(ARDUINO)/wiring_pulse.c \
$(ARDUINO)/wiring_analog.c \
$(ARDUINO)/pins_arduino.c \
$(ARDUINO)/wiring.c \
$(ARDUINO)/wiring_digital.c \
$(ARDUINO)/WInterrupts.c \
$(ARDUINO)/wiring_shift.c \
# end of C_MODULES

CXX_MODULES = \
$(ARDUINO)/main.cpp \
$(ARDUINO)/WMath.cpp \
$(ARDUINO)/Print.cpp \
$(ARDUINO)/HardwareSerial.cpp
# end of CXX_MODULES

C_MODULES += $(C_LIBRARIES)
CXX_MODULES += $(CXX_LIBRARIES)

CXX_APP = $(BUILD_DIR)/$(TARGET).cpp
MODULES = $(C_MODULES) $(CXX_MODULES)
SRC += $(C_MODULES)
CXXSRC += $(CXX_MODULES)
FORMAT = ihex


# Name of this Makefile (used for "make depend").
MAKEFILE = Makefile

# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
#DEBUG = stabs
DEBUG =

OPT = s

# Place -D or -U options here
CDEFS = -DF_CPU=$(F_CPU)L -DARDUINO=$(VERSION)
CXXDEFS = -DF_CPU=$(F_CPU)L -DARDUINO=$(VERSION)

AVR_HEADERS = $(INSTALL_DIR)/hardware/tools/avr/avr/include/avr

ARDUINO_LIB_INCLUDES  = $(foreach LIBNAME, $(LIBRARIES), -I$(LIBRARIES_DIR)/$(LIBNAME)/)
ARDUINO_LIB_INCLUDES += $(foreach LIBNAME, $(LIBRARIES), -I$(LIBRARIES_DIR)/$(LIBNAME)/utility/)
ARDUINO_LIB_INCLUDES += $(foreach LIBNAME, $(CONTRIB_LIBRARIES), -I$(CONTRIB_LIBRARIES_DIR)/$(LIBNAME)/)
ARDUINO_LIB_INCLUDES += $(foreach LIBNAME, $(CONTRIB_LIBRARIES), -I$(CONTRIB_LIBRARIES_DIR)/$(LIBNAME)/utility/)


# Place -I options here
CINCS   += -I$(CURDIR) -I$(ARDUINO) $(ARDUINO_LIB_INCLUDES) -I$(AVR_HEADERS)
CXXINCS += -I$(CURDIR) -I$(ARDUINO) $(ARDUINO_LIB_INCLUDES) -I$(AVR_HEADERS)

# Compiler flag to set the C Standard level.
# c89   - "ANSI" C
# gnu89 - c89 plus GCC extensions
# c99   - ISO C99 standard (not yet fully implemented)
# gnu99 - c99 plus GCC extensions
#CSTANDARD = -std=gnu99
CDEBUG = -g$(DEBUG)
#CWARN = -Wall -Wstrict-prototypes
#CWARN = -Wall   # show all warnings
CWARN = -w      # suppress all warnings
####CTUNING = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
CTUNING = -ffunction-sections -fdata-sections
CXXTUNING = -fno-exceptions -ffunction-sections -fdata-sections
#CEXTRA = -Wa,-adhlns=$(<:.c=.lst)

CFLAGS = $(CDEBUG) -O$(OPT) $(CWARN) $(CTUNING) $(CDEFS) $(CINCS) $(CSTANDARD) $(CEXTRA)
CXXFLAGS = $(CDEBUG) -O$(OPT) $(CWARN) $(CXXTUNING) $(CDEFS) $(CINCS)
#ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs
LDFLAGS = -O$(OPT) -lm -Wl,--gc-sections

# Program settings
CC = $(AVR_TOOLS_PATH)/avr-gcc
CXX = $(AVR_TOOLS_PATH)/avr-g++
LD = $(AVR_TOOLS_PATH)/avr-gcc
OBJCOPY = $(AVR_TOOLS_PATH)/avr-objcopy
OBJDUMP = $(AVR_TOOLS_PATH)/avr-objdump
AR  = $(AVR_TOOLS_PATH)/avr-ar
SIZE = $(AVR_TOOLS_PATH)/avr-size
NM = $(AVR_TOOLS_PATH)/avr-nm
AVRDUDE = $(AVRDUDE_PATH)/avrdude
REMOVE = rm -f
MV = mv -f

# Define all object files.
OBJ = $(SRC:.c=.o) $(CXXSRC:.cpp=.o) $(ASRC:.S=.o)
OBJ_MODULES = $(C_MODULES:.c=.o) $(CXX_MODULES:.cpp=.o)

# Define all listing files.
LST = $(ASRC:.S=.lst) $(CXXSRC:.cpp=.lst) $(SRC:.c=.lst)

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = $(CFLAGS) -mmcu=$(MCU)
ALL_CXXFLAGS = $(CXXFLAGS) -mmcu=$(MCU)
ALL_ASFLAGS = -x assembler-with-cpp $(ASFLAGS) -mmcu=$(MCU)
ALL_LDFLAGS = $(LDFLAGS) -mmcu=$(MCU)

# Default target.
all: clean_build build sizeafter
# This is to comply with Eclipse
	cp $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(PROJECT).hex

build: elf hex

clean_build:
	$(REMOVE) $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).eep $(BUILD_DIR)/$(TARGET).cof $(BUILD_DIR)/$(TARGET).elf \
	$(BUILD_DIR)/$(TARGET).map $(BUILD_DIR)/$(TARGET).sym $(BUILD_DIR)/$(TARGET).lss $(BUILD_DIR)/$(TARGET).cpp $(BUILD_DIR)/$(TARGET).h
	
$(BUILD_DIR)/$(TARGET).cpp: $(TARGET_DIR)/$(TARGET).pde
	# Here is the "preprocessing".
	# It creates a .cpp file based with the same name as the .pde file.
	# On top of the new .cpp file comes the WProgram.h header.
	# and prototypes for setup() and Loop()
	# Then the .cpp file will be compiled. Errors during compile will
	# refer to this new, automatically generated, file.
	# Not the original .pde file you actually edit...
	@echo "*** Compiling $(TARGET) on $(MCU) at $(F_CPU)MHz ***"
	#cat $(ARDUINO)/main.cpp > $(BUILD_DIR)/$(TARGET).h
	echo "#include <WProgram.h>" > $(BUILD_DIR)/$(TARGET).h
	echo "extern \"C\" void __cxa_pure_virtual() { cli(); for (;;); }" >> $(BUILD_DIR)/$(TARGET).h
	echo "#include \"$(TARGET).h\"" > $(BUILD_DIR)/$(TARGET).cpp
	echo "/**** $(TARGET).pde ****/" >> $(BUILD_DIR)/$(TARGET).cpp
	echo "#include \"../$(TARGET).pde\"" >> $(BUILD_DIR)/$(TARGET).cpp

elf: $(BUILD_DIR)/$(TARGET).elf
hex: $(BUILD_DIR)/$(TARGET).hex
eep: $(BUILD_DIR)/$(TARGET).eep
lss: $(BUILD_DIR)/$(TARGET).lss
sym: $(BUILD_DIR)/$(TARGET).sym

# Program the device.  
upload: $(BUILD_DIR)/$(TARGET).hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(BUILD_DIR)/$(TARGET).hex
ELFSIZE = $(SIZE)  $(BUILD_DIR)/$(TARGET).elf
sizebefore:
	@if [ -f $(BUILD_DIR)/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(HEXSIZE); echo; fi

sizeafter:
	@if [ -f $(BUILD_DIR)/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(HEXSIZE); echo; fi


# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000


coff: $(BUILD_DIR)/$(TARGET).elf
	$(COFFCONVERT) -O coff-avr $(BUILD_DIR)/$(TARGET).elf $(TARGET).cof


extcoff: $(TARGET).elf
	$(COFFCONVERT) -O coff-ext-avr $(BUILD_DIR)/$(TARGET).elf $(TARGET).cof


.SUFFIXES: .elf .hex .eep .lss .sym

.elf.hex:
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

.elf.eep:
	$(OBJCOPY) -O $(FORMAT) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--no-change-warnings \
	--change-section-lma .eeprom=0 $< $@

# Create extended listing file from ELF output file.
.elf.lss:
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
.elf.sym:
	$(NM) -n $< > $@

# Link: create ELF output file from library.
$(BUILD_DIR)/$(TARGET).elf: $(BUILD_DIR)/$(TARGET).o $(OBJ) $(BUILD_DIR)/core.a
	$(LD) -o $@ $(BUILD_DIR)/$(TARGET).o $(OBJ) $(BUILD_DIR)/core.a $(ALL_LDFLAGS)

$(BUILD_DIR)/core.a: $(OBJ_MODULES)
	@for i in $(OBJ_MODULES); do echo $(AR) rcs $(BUILD_DIR)/core.a $$i; $(AR) rcs $(BUILD_DIR)/core.a $$i; done

# Compile: create object files from C++ source files.
.cpp.o:
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@

# Compile: create object files from C source files.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $< -o $@


# Compile: create assembler files from C source files.
.c.s:
	$(CC) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
.S.o:
	$(CC) -c $(ALL_ASFLAGS) $< -o $@


# Automatic dependencies
%.d: %.c
	$(CC) -M $(ALL_CFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@

%.d: %.cpp
	$(CXX) -M $(ALL_CXXFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@


# Target: clean project.
clean: clean_build
	$(REMOVE) $(BUILD_DIR)/core.a $(OBJ) $(LST) $(SRC:.c=.s) $(SRC:.c=.d) $(CXXSRC:.cpp=.s) $(CXXSRC:.cpp=.d)

.PHONY: all build elf hex eep lss sym program coff extcoff clean applet_files sizebefore sizeafter

#include $(SRC:.c=.d)
#include $(CXXSRC:.cpp=.d)